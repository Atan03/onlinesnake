// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoFile/protoMsg.proto

#include "protoMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace myProto {
constexpr Pixel::Pixel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(0)
  , x_loc_(0)
  , y_loc_(0){}
struct PixelDefaultTypeInternal {
  constexpr PixelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PixelDefaultTypeInternal() {}
  union {
    Pixel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PixelDefaultTypeInternal _Pixel_default_instance_;
constexpr StrMsg::StrMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : main_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hint_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StrMsgDefaultTypeInternal {
  constexpr StrMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrMsgDefaultTypeInternal() {}
  union {
    StrMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrMsgDefaultTypeInternal _StrMsg_default_instance_;
constexpr FrameMsg::FrameMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pixels_()
  , hint_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FrameMsgDefaultTypeInternal {
  constexpr FrameMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameMsgDefaultTypeInternal() {}
  union {
    FrameMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameMsgDefaultTypeInternal _FrameMsg_default_instance_;
}  // namespace myProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protoFile_2fprotoMsg_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protoFile_2fprotoMsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protoFile_2fprotoMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protoFile_2fprotoMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::myProto::Pixel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myProto::Pixel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myProto::Pixel, symbol_),
  PROTOBUF_FIELD_OFFSET(::myProto::Pixel, x_loc_),
  PROTOBUF_FIELD_OFFSET(::myProto::Pixel, y_loc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::myProto::StrMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myProto::StrMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myProto::StrMsg, main_msg_),
  PROTOBUF_FIELD_OFFSET(::myProto::StrMsg, hint_msg_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::myProto::FrameMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myProto::FrameMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myProto::FrameMsg, pixels_),
  PROTOBUF_FIELD_OFFSET(::myProto::FrameMsg, hint_msg_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::myProto::Pixel)},
  { 11, 18, sizeof(::myProto::StrMsg)},
  { 20, 27, sizeof(::myProto::FrameMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myProto::_Pixel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myProto::_StrMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myProto::_FrameMsg_default_instance_),
};

const char descriptor_table_protodef_protoFile_2fprotoMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030protoFile/protoMsg.proto\022\007myProto\"5\n\005P"
  "ixel\022\016\n\006symbol\030\001 \002(\005\022\r\n\005x_loc\030\002 \002(\005\022\r\n\005y"
  "_loc\030\003 \002(\005\",\n\006StrMsg\022\020\n\010main_msg\030\001 \002(\t\022\020"
  "\n\010hint_msg\030\002 \001(\t\"<\n\010FrameMsg\022\036\n\006pixels\030\001"
  " \003(\0132\016.myProto.Pixel\022\020\n\010hint_msg\030\002 \001(\t"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protoFile_2fprotoMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protoFile_2fprotoMsg_2eproto = {
  false, false, 198, descriptor_table_protodef_protoFile_2fprotoMsg_2eproto, "protoFile/protoMsg.proto", 
  &descriptor_table_protoFile_2fprotoMsg_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_protoFile_2fprotoMsg_2eproto::offsets,
  file_level_metadata_protoFile_2fprotoMsg_2eproto, file_level_enum_descriptors_protoFile_2fprotoMsg_2eproto, file_level_service_descriptors_protoFile_2fprotoMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_protoFile_2fprotoMsg_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protoFile_2fprotoMsg_2eproto);
  return descriptor_table_protoFile_2fprotoMsg_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protoFile_2fprotoMsg_2eproto(&descriptor_table_protoFile_2fprotoMsg_2eproto);
namespace myProto {

// ===================================================================

class Pixel::_Internal {
 public:
  using HasBits = decltype(std::declval<Pixel>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Pixel::Pixel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myProto.Pixel)
}
Pixel::Pixel(const Pixel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&symbol_, &from.symbol_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_loc_) -
    reinterpret_cast<char*>(&symbol_)) + sizeof(y_loc_));
  // @@protoc_insertion_point(copy_constructor:myProto.Pixel)
}

void Pixel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&symbol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_loc_) -
    reinterpret_cast<char*>(&symbol_)) + sizeof(y_loc_));
}

Pixel::~Pixel() {
  // @@protoc_insertion_point(destructor:myProto.Pixel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pixel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pixel::ArenaDtor(void* object) {
  Pixel* _this = reinterpret_cast< Pixel* >(object);
  (void)_this;
}
void Pixel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pixel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pixel::Clear() {
// @@protoc_insertion_point(message_clear_start:myProto.Pixel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&symbol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_loc_) -
        reinterpret_cast<char*>(&symbol_)) + sizeof(y_loc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pixel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_symbol(&has_bits);
          symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 x_loc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x_loc(&has_bits);
          x_loc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y_loc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y_loc(&has_bits);
          y_loc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pixel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myProto.Pixel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_symbol(), target);
  }

  // required int32 x_loc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x_loc(), target);
  }

  // required int32 y_loc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y_loc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myProto.Pixel)
  return target;
}

size_t Pixel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:myProto.Pixel)
  size_t total_size = 0;

  if (_internal_has_symbol()) {
    // required int32 symbol = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_symbol());
  }

  if (_internal_has_x_loc()) {
    // required int32 x_loc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_loc());
  }

  if (_internal_has_y_loc()) {
    // required int32 y_loc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_loc());
  }

  return total_size;
}
size_t Pixel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myProto.Pixel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 symbol = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_symbol());

    // required int32 x_loc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_loc());

    // required int32 y_loc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_loc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pixel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myProto.Pixel)
  GOOGLE_DCHECK_NE(&from, this);
  const Pixel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pixel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myProto.Pixel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myProto.Pixel)
    MergeFrom(*source);
  }
}

void Pixel::MergeFrom(const Pixel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myProto.Pixel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_ = from.symbol_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_loc_ = from.x_loc_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_loc_ = from.y_loc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pixel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myProto.Pixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pixel::CopyFrom(const Pixel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myProto.Pixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pixel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Pixel::InternalSwap(Pixel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pixel, y_loc_)
      + sizeof(Pixel::y_loc_)
      - PROTOBUF_FIELD_OFFSET(Pixel, symbol_)>(
          reinterpret_cast<char*>(&symbol_),
          reinterpret_cast<char*>(&other->symbol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pixel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StrMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<StrMsg>()._has_bits_);
  static void set_has_main_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hint_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StrMsg::StrMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myProto.StrMsg)
}
StrMsg::StrMsg(const StrMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  main_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_main_msg()) {
    main_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_main_msg(), 
      GetArena());
  }
  hint_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hint_msg()) {
    hint_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hint_msg(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:myProto.StrMsg)
}

void StrMsg::SharedCtor() {
main_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hint_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StrMsg::~StrMsg() {
  // @@protoc_insertion_point(destructor:myProto.StrMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StrMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  main_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hint_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StrMsg::ArenaDtor(void* object) {
  StrMsg* _this = reinterpret_cast< StrMsg* >(object);
  (void)_this;
}
void StrMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:myProto.StrMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      main_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hint_msg_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string main_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_main_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myProto.StrMsg.main_msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hint_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hint_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myProto.StrMsg.hint_msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myProto.StrMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string main_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_msg().data(), static_cast<int>(this->_internal_main_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "myProto.StrMsg.main_msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_main_msg(), target);
  }

  // optional string hint_msg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hint_msg().data(), static_cast<int>(this->_internal_hint_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "myProto.StrMsg.hint_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hint_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myProto.StrMsg)
  return target;
}

size_t StrMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myProto.StrMsg)
  size_t total_size = 0;

  // required string main_msg = 1;
  if (_internal_has_main_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_msg());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hint_msg = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hint_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StrMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myProto.StrMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const StrMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StrMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myProto.StrMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myProto.StrMsg)
    MergeFrom(*source);
  }
}

void StrMsg::MergeFrom(const StrMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myProto.StrMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_main_msg(from._internal_main_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hint_msg(from._internal_hint_msg());
    }
  }
}

void StrMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myProto.StrMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrMsg::CopyFrom(const StrMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myProto.StrMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StrMsg::InternalSwap(StrMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  main_msg_.Swap(&other->main_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hint_msg_.Swap(&other->hint_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StrMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrameMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameMsg>()._has_bits_);
  static void set_has_hint_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FrameMsg::FrameMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pixels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myProto.FrameMsg)
}
FrameMsg::FrameMsg(const FrameMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pixels_(from.pixels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hint_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hint_msg()) {
    hint_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hint_msg(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:myProto.FrameMsg)
}

void FrameMsg::SharedCtor() {
hint_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FrameMsg::~FrameMsg() {
  // @@protoc_insertion_point(destructor:myProto.FrameMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hint_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameMsg::ArenaDtor(void* object) {
  FrameMsg* _this = reinterpret_cast< FrameMsg* >(object);
  (void)_this;
}
void FrameMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrameMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:myProto.FrameMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pixels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hint_msg_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .myProto.Pixel pixels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pixels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string hint_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hint_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myProto.FrameMsg.hint_msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myProto.FrameMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .myProto.Pixel pixels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pixels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pixels(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string hint_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hint_msg().data(), static_cast<int>(this->_internal_hint_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "myProto.FrameMsg.hint_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hint_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myProto.FrameMsg)
  return target;
}

size_t FrameMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myProto.FrameMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .myProto.Pixel pixels = 1;
  total_size += 1UL * this->_internal_pixels_size();
  for (const auto& msg : this->pixels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string hint_msg = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hint_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myProto.FrameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myProto.FrameMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myProto.FrameMsg)
    MergeFrom(*source);
  }
}

void FrameMsg::MergeFrom(const FrameMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myProto.FrameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pixels_.MergeFrom(from.pixels_);
  if (from._internal_has_hint_msg()) {
    _internal_set_hint_msg(from._internal_hint_msg());
  }
}

void FrameMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myProto.FrameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameMsg::CopyFrom(const FrameMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myProto.FrameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameMsg::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pixels_)) return false;
  return true;
}

void FrameMsg::InternalSwap(FrameMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pixels_.InternalSwap(&other->pixels_);
  hint_msg_.Swap(&other->hint_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace myProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::myProto::Pixel* Arena::CreateMaybeMessage< ::myProto::Pixel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myProto::Pixel >(arena);
}
template<> PROTOBUF_NOINLINE ::myProto::StrMsg* Arena::CreateMaybeMessage< ::myProto::StrMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myProto::StrMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::myProto::FrameMsg* Arena::CreateMaybeMessage< ::myProto::FrameMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myProto::FrameMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
